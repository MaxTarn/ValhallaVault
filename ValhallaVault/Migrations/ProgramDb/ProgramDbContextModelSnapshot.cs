// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValhallaVault.Data;

#nullable disable

namespace ValhallaVault.Migrations.ProgramDb
{
    [DbContext(typeof(ProgramDbContext))]
    partial class ProgramDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ValhallaVault.Data.Models.AnswerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionModelId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegmentIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubcategoryModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryModelId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.SegmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubcategoryIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryModelId");

                    b.ToTable("Segments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Del 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Del 2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Del 3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Del 1"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Name = "Del 2"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Name = "Del 1"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Name = "Del 2"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Name = "Del 3"
                        });
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.SubcategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SegmentModelId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kreditkortsbedrägeri",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Romansbedrägeri",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Investeringsbedrägeri",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Telefonbedrägeri",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Digital säkerhet på företag",
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "Risker och beredskap",
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cyberangrepp mot känsliga sektorer",
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Allmänt om cyberspionage",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 9,
                            Name = "Metoder för cyberspionage",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 10,
                            Name = "Säkerhetsskyddslagen",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cyberspionagets aktörer",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 12,
                            Name = "Social engineering",
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 13,
                            Name = "Virus, maskar och trojaner",
                            SegmentId = 8
                        },
                        new
                        {
                            Id = 14,
                            Name = "Abonnemangsfällor och falska fakturor",
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 15,
                            Name = "Ransomware",
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Statistik och förhållningssätt",
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 17,
                            Name = "Utpressningsvirus",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 18,
                            Name = "Attacker mot servrar",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 19,
                            Name = "Cyberangrepp i Norden",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 20,
                            Name = "Varning för vishing",
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 21,
                            Name = "Identifiera VD-mejl",
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 22,
                            Name = "Öneangrepp och presentkortsbluffar",
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 23,
                            Name = "Värvningsförsök",
                            SegmentId = 8
                        },
                        new
                        {
                            Id = 24,
                            Name = "Affärsspionage",
                            SegmentId = 8
                        },
                        new
                        {
                            Id = 25,
                            Name = "Påverkanskampanjer",
                            SegmentId = 8
                        });
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.AnswerModel", b =>
                {
                    b.HasOne("ValhallaVault.Data.Models.QuestionModel", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.QuestionModel", b =>
                {
                    b.HasOne("ValhallaVault.Data.Models.SubcategoryModel", "Subcategory")
                        .WithMany("Questions")
                        .HasForeignKey("SubcategoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.SegmentModel", b =>
                {
                    b.HasOne("ValhallaVault.Data.Models.CategoryModel", "Category")
                        .WithMany("Segments")
                        .HasForeignKey("CategoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.SubcategoryModel", b =>
                {
                    b.HasOne("ValhallaVault.Data.Models.SegmentModel", "Segment")
                        .WithMany("Subcategories")
                        .HasForeignKey("SegmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.CategoryModel", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.QuestionModel", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.SegmentModel", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("ValhallaVault.Data.Models.SubcategoryModel", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
