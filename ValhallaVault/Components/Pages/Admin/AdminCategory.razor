@page "/adminCategory"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ValhallaVault.Data
@using ValhallaVault.Data.Models;
@using ValhallaVault.Data.Repositories
@inject IDbContextFactory<ProgramDbContext> dbFactory;
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@if (Fail == true)
{
    <p style=" color:red;">The request failed</p>
}

<br />
<br />

<h5> Create </h5>
<EditForm FormName="CategoryCreate" Model="categoryModel" OnValidSubmit="Post">
    <ValidationSummary />
    <DataAnnotationsValidator />

    <label>Category Name</label>
    <br />
    <InputText @bind-Value="@categoryModel.Name"></InputText>
    <br />
    <label>Category Info</label>
    <br />
    <InputTextArea @bind-Value="@categoryModel.Info"></InputTextArea>
    <br />
    <input type="submit" value="Post" class="btn btn-primary">
</EditForm>

<br />
<br />

<h5>Edit and delete</h5>
<input @bind-value="searchString" class="form-check-label" type="text" placeholder="Search by category" />
<table class="table">
    <thead>
        <tr>
            <th>Category</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (allCategories != null)
        {
            @if (searchString == null)
            {
                @foreach (CategoryModel category in allCategories)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => showDeleteConfirmation(category)">Press to Delete</button>
                            <button class="btn btn-primary" @onclick="()=> SelectEdit(category)">Press To Edit</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                @foreach (CategoryModel category in filteredSearch)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => showDeleteConfirmation(category)">Press to Delete</button>
                            <button class="btn btn-primary" @onclick="()=> SelectEdit(category)">Press To Edit</button>
                        </td>
                    </tr>
                }
            }

        }
        else
        {
            <tr>Loading categories...</tr>
        }
    </tbody>

    @if (NeedDeleteConfirmation == true)
    {
        <div style="border: 1px solid RED; width:400px; height:150px">
            <p>Are you sure that you want to delete this? </p>
            <p style=" color:red">It is permanent!</p>
            <br />
            <button @onclick="()=> Delete(categoryToDelete.Id)" class="btn btn-primary">Yes</button>
            <button @onclick="() => ChangeConfirmation(2)" class="btn btn-primary">No</button>
        </div>
    }
</table>




<br />

@if (editing == true)
{
    <h6>Editing: "@selectedCategory.Name"</h6>
    <EditForm FormName="CategoryEdit" Model="selectedCategory" OnValidSubmit=showEditConfirmation>
        <ValidationSummary />
        <DataAnnotationsValidator />

        <InputText @bind-Value="selectedCategory.Name"></InputText>
        <br />
        
        <InputTextArea @bind-Value="selectedCategory.Info"></InputTextArea>

        <br />
        <button type="submit" value="Put" class="btn btn-primary"> Edit</button>
    </EditForm>

    @if (NeedEditConfirmation == true)
    {
        <div style="border: 1px solid RED; width:400px; height:150px">
            <p>Are you sure that you want to edit this? </p>
            <p style=" color:red">It is permanent!</p>
            <br />
            <button @onclick="Edit" class="btn btn-primary">Yes</button>
            <button @onclick="() => ChangeConfirmation(2)" class="btn btn-primary">No</button>
        </div>
    }
}


@code {


    [SupplyParameterFromForm]
    public CategoryModel categoryModel { get; set; } = new();
    [SupplyParameterFromForm]
    private SegmentModel segmentModel { get; set; } = new();
    [SupplyParameterFromForm]
    private CategoryModel selectedCategory { get; set; } = new();

    private string? searchString = null;

    private bool editing = false;
    private bool Fail = false;

    private IEnumerable<SegmentModel>? allSegments;
    private IEnumerable<CategoryModel>? allCategories;
    private IEnumerable<CategoryModel>? filteredSearch => allCategories.Where(search => search.Name.ToLower().Contains(searchString.ToLower()));

    CategoryModel categoryToDelete { get; set; } = new();

    private bool NeedDeleteConfirmation = false;
    private bool NeedEditConfirmation = false;
    private bool Confirmation = false;


    private void showDeleteConfirmation(CategoryModel categoryModel)
    {
        categoryToDelete = categoryModel;
        NeedDeleteConfirmation = true;
    }

    private void showEditConfirmation()
    {
        NeedEditConfirmation = true;
    }

    private void ChangeConfirmation(int value)
    {
        if (value == 2)
        {
            NeedDeleteConfirmation = false;
            NeedEditConfirmation = false;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        using var context = dbFactory.CreateDbContext();
        CategoryRepo categoryRepo = new(context);
        SegmentRepo segmentRepo = new(context);

        allSegments = await segmentRepo.GetAllSegmentsAsync();
        allCategories = await categoryRepo.GetAllCategoriesAsync();
    }

    private async Task Post()
    {
        using var context = dbFactory.CreateDbContext();
        CategoryRepo categoryRepo = new(context);

        await categoryRepo.AddCategoryAsync(categoryModel);
        
        await UpdateUi();
    }


    private async Task Delete(int id)
    {
        using var context = dbFactory.CreateDbContext();
        CategoryRepo categoryRepo = new(context);

        await categoryRepo.DeleteCategoryAsync(id);
        
        await UpdateUi();

        NeedDeleteConfirmation = false;
    }

    private async Task SelectEdit(CategoryModel categoryModel)
    {
        selectedCategory = categoryModel;
        editing = true;

        await UpdateUi();
    }

    private async Task Edit()
    {
        using var context = dbFactory.CreateDbContext();
        CategoryRepo categoryRepo = new(context);

        if (selectedCategory.Name != null)
        {
            await categoryRepo.UpdateCategoryAsync(selectedCategory);
            


            UpdateUi();
        }

        NeedEditConfirmation = false;
        editing = false;
    }

    private async Task UpdateUi()
    {
        using var context = dbFactory.CreateDbContext();
        CategoryRepo categoryRepo = new(context);
        SegmentRepo segmentRepo = new(context);

        allSegments = await segmentRepo.GetAllSegmentsAsync();
        allCategories = await categoryRepo.GetAllCategoriesAsync();
        StateHasChanged();

    }


}