@using ValhallaVault.Data.Models
@using ValhallaVault.Data.Repositories
@inject AnswerRepo AnswerRepo

@if (TheQuestion == null || TheQuestion?.Answers == null || string.IsNullOrEmpty(TheQuestion.Question))
{
    <p class="alert alert-danger font-weight-bold">Something Went Wrong. The Question Was not found</p>
    return;
}

<div>
    <div class="card-header bg-primary text-white">
        <h5 class="card-title">@TheQuestion.Question</h5>
    </div>
    <ul class="list-group list-group-flush">
        @foreach (AnswerModel answer in TheQuestion.Answers)
        {
            @if (answer.IsCorrect.HasValue)
            {
                <li class="list-group-item" >
                    <Answer TheAnswerModel="@answer" StyleToAddToCorrectAnswer="@StyleToAddToCorrectAnswer" StyleToAddToWrongAnswer="@StyleToAddToWrongAnswer" ResetState="@_resetAnswerState"></Answer>
                </li>
            }
            else
            {
                <li><p>Something went wrong when trying to display this answer! Was unable to figure out wheter this answer was correct or incorrect</p></li>
            }
        }
    </ul>
</div>



@code {
    [Parameter]
    public QuestionModel? TheQuestion { get; set; }

    [Parameter]
    public string? StyleToAddToCorrectAnswer { get; set; }

    [Parameter] 
    public string? StyleToAddToWrongAnswer { get; set; }

    [Parameter]
    public bool _resetAnswerState { get; set; }


    private List<AnswerModel> Answers;


    protected override async Task OnInitializedAsync()
    {
        Answers = (await AnswerRepo.GetAllAnswers())
            .Where(q => q.QuestionId == TheQuestion.Id)
            .ToList();

         await base.OnInitializedAsync();
    }

}
