@using ValhallaVault.Data.Models
@using Humanizer
@rendermode InteractiveServer
@if (TheAnswerModel == null)
{
    <p>Something Went Wrong. The Answer Was not found</p>
    return;
}






@if (TheAnswerModel.IsCorrect.HasValue && TheAnswerModel.IsCorrect == true)
{
    @* When the Answer correct *@


    <div style="@StyleToAddToCorrectAnswer">
        <p>
            <input type="checkbox" @bind="IsChecked" />
            @TheAnswerModel.Answer
        </p>


    </div>
}
else
{
    @* When the Answer is Wrong  *@


    @if (IsChecked == true)
    {
        @* When user has ticked in a wrong answer *@

        <div style="@StyleToAddToWrongAnswer">
            <p>
                <input type="checkbox"  @bind="IsChecked" />
                @TheAnswerModel.Answer
            </p>


        </div>
        return;
    }

    @* When the user has NOT ticked in this answer, and the anser is NOT correct *@
    <div>
        <p>
            <input type="checkbox"  @bind="IsChecked" />
            @TheAnswerModel.Answer
        </p>


    </div>
}



@code {
    [Parameter]
    public AnswerModel? TheAnswerModel { get; set; }

    private AnswerModel? _oldModel;

    [Parameter] public bool IsChecked { get; set; } = false;

    [Parameter]
    public string? StyleToAddToCorrectAnswer { get; set; }

    [Parameter]
    public string? StyleToAddToWrongAnswer { get; set; }




    [Parameter]
    public bool ResetState { get; set; }


    private async Task UpdateCheckBox(ChangeEventArgs e)
    {
        if ((bool?)e.Value != null)
        {
            IsChecked = (bool)e.Value;
        }
        else
        {
            IsChecked = false;
        }

        // Ensure proper order of execution by awaiting InvokeAsync
        await InvokeAsync(() => { });
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        _oldModel = TheAnswerModel;
    }

    protected override void OnParametersSet()
    {
        if (ResetState)
        {
            IsChecked = false;
        }
    }

}
