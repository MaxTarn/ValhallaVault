@page "/DisplayAllCategories/DisplayCategory/DisplaySegment/{SegmentId:int}"
@rendermode InteractiveServer
@using ValhallaVault.Data.Models
@using ValhallaVault.Data.Repositories
@using ValhallaVault.Data.Containers
@using ValhallaVault.Data.DbServices
@using ValhallaVault.Components.Pages.RazorComponents
@using ValhallaVault.Data
@inject ISegmentRepository SegmentRepo
@inject ISubcategoryRepository SubcategoryRepo
@inject NavigationManager Navigation
@inject UserQuestionService UserQuestionService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@if (SegmentId == null)
{
    <div class="container mt-4">
        <p class="alert alert-warning">Something Went Wrong! The given segment id Was null</p>
    </div>
    return;
}
@if (Segment == null)
{
    <div class="container mt-4">
        <p class="alert alert-warning">Something went wrong! Unable to find segment with given Id</p>
    </div>
    return;
}

 @if (Segment?.SubCategoryContainers == null || Segment.SubCategoryContainers?.Count <= 0)
{
    <div class="container mt-4">
        <p class="alert alert-warning">Something went Wrong! Unable to find any subcategories or there were none in the database. </p>
    </div>
    return;
} 

 <div class="container mt-4">
     <h1>@Segment.Original.Name</h1>
    <BackButton></BackButton>
     <div class="list-group">
         @foreach (SubCategoryContainer subcategory in Segment.SubCategoryContainers)
         {
             if (CanProgress(subcategory))
             {
                 <a href="@($"{Navigation.BaseUri}DisplayAllCategories/DisplayCategory/DisplaySegment/DisplayQuestions/{subcategory.Original.Id}")" class="list-group-item list-group-item-action">
                     @subcategory.Original.Name
                     <p><small>Questions Correct: @subcategory.CorrectQuestions/@subcategory.TotalQuestions (@Math.Round(subcategory.PercentageComplete)%)</small></p>
                     <ProgressBar PercentageComplete="subcategory.PercentageComplete"></ProgressBar>
                 </a>
             }
             else
             {
                 <div class="list-group-item disabled">
                     @subcategory.Original.Name
                     <p>
                         <small>You must achieve at least 75% in the previous subcategory to unlock this one</small>
                         <br/>
                         <small>Questions Correct: @subcategory.CorrectQuestions/@subcategory.TotalQuestions (@Math.Round(subcategory.PercentageComplete)%)</small>
                     </p>
                     <ProgressBar PercentageComplete="subcategory.PercentageComplete"></ProgressBar>
                 </div>
             }
         }

     </div>
 </div>


@code {
    [Parameter]
    public int? SegmentId { get; set; }
    private string? UserId = "";

    private SegmentContainer? Segment;

    private bool CanProgress(SubCategoryContainer subcategory)
    {
        // Check if the previous subcategory exists
        if (Segment.SubCategoryContainers.IndexOf(subcategory) > 0)
        {
            var previousSubcategory = Segment.SubCategoryContainers[Segment.SubCategoryContainers.IndexOf(subcategory) - 1];
            return previousSubcategory.PercentageComplete >= 75.0;
        }
        return true; // First subcategory can always be accessed
    }

    //TODO add a small text that talks about this segment

    protected override async Task OnInitializedAsync()
    {
        if (SegmentId == null)
        {
            await base.OnInitializedAsync();
            return;
        }

        string? name = (await AuthStateProvider.GetAuthenticationStateAsync())?
            .User?
            .Identity?
            .Name?
            .Trim()
            .ToUpper();

        if (name == null) return;

        UserId = (await UserManager.FindByNameAsync(name))?.Id;

        if(UserId == null)return;

        var response = await UserQuestionService.PercentageOfQuestionsAnsweredForSegmentId((int)SegmentId, UserId);
        Segment = new SegmentContainer()
        {
            Original = await SegmentRepo.GetSegmentByIdAsync((int)SegmentId),
            CorrectQuestions = response.rightQuestions,
            PercentageComplete = response.percentageComplete,
            TotalQuestions = response.totalQuestions

        };

        Segment.SubCategoryContainers = new();

        foreach (SubcategoryModel subcategory in Segment.Original.Subcategories)
        {
            var subcategoryResponse = await UserQuestionService.PercentageOfQuestionsAnsweredForSubcategoryId(subcategory.Id, UserId);
            Segment.SubCategoryContainers.Add(new SubCategoryContainer()
            {
                Original = subcategory,
                CorrectQuestions = subcategoryResponse.rightQuestions,
                TotalQuestions = subcategoryResponse.totalQuestions,
                PercentageComplete = subcategoryResponse.percentageComplete
            });
        }

    }
}
