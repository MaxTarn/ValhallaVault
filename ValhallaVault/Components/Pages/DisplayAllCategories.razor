@page "/DisplayAllCategories"
@using ValhallaVault.Data.Models
@using ValhallaVault.Components.Pages.RazorComponents
@using ValhallaVault.Data
@using ValhallaVault.Data.Containers
@using ValhallaVault.Data.DbServices
@using ValhallaVault.Data.Repositories
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject ICategoryRepository CategoryRepo
@inject UserQuestionService UserQuestionService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer

@if (AllCategories == null)
{
    <div class="container mt-4">
        <p class="alert alert-danger">Something Went Wrong! Unable to Gather all of the Categories</p>
    </div>
    return;
}

@if (AllCategories.Count <= 0)
{
    <div class="container mt-4">
        <p class="alert alert-warning">Something went Wrong! There were no categories in the database!</p>
    </div>
}

<h1>@UserId</h1>

<div class="container mt-4">
    <h1>Categories:</h1>
    <input type="text" @bind="_searchText" placeholder="Searching for something?" />
    <button @onclick="FilterCategories">Search</button>
    <!-- Apply Bootstrap styling to the links -->
    <div class="list-group">
        @foreach (var category in FilteredCategories)
        {
            <a href="@($"{Navigation.BaseUri}DisplayAllCategories/DisplayCategory/{category.Original.Id}")" class="list-group-item list-group-item-action">
                @category.Original.Name
                <ProgressBar PercentageComplete="@category.PercentageCompleted"></ProgressBar>
                @{ Console.WriteLine("percentacge: "+category.PercentageCompleted);}
            </a>
        }
    </div>
</div>

@code {

    private List<CategoryContainer>? AllCategories { get; set; }
    private List<CategoryContainer>? FilteredCategories { get; set; }


    private string _searchText = "";
    private string? UserId = "";

    private void FilterCategories()
    {
        if (AllCategories == null) return;

        FilteredCategories = AllCategories
            .Where(category => string.IsNullOrEmpty(_searchText) || category.Original.Name.IndexOf(_searchText, StringComparison.OrdinalIgnoreCase) != -1)
            .ToList();
    }

    

    protected override async Task OnInitializedAsync()
    {
        string? name = (await AuthStateProvider.GetAuthenticationStateAsync())?
            .User?
            .Identity?
            .Name?
            .Trim()
            .ToUpper();

        if (name == null) return;

        UserId = (await UserManager.FindByNameAsync(name))?.Id;


        AllCategories = (await CategoryRepo.GetAllCategoriesAsync())
            .Select(category => { return new CategoryContainer() { Original = category }; })
            .ToList();

        foreach (CategoryContainer categoryContainer in AllCategories)
        {
            var response = await UserQuestionService.PercentageOfQuestionsAnswerdForCategoryId(categoryContainer.Original.Id, UserId ?? "");
            categoryContainer.PercentageCompleted = response.percentageComplete;
            categoryContainer.CorrectQuestions = response.rightQuestions;
            categoryContainer.TotalQuestions = response.totalQuestions;
        }
        FilteredCategories = AllCategories;

        
    }
}