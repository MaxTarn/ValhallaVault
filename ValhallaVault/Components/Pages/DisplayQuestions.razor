@page "/DisplayAllCategories/DisplayCategory/DisplaySegment/DisplayQuestions/{SubCategoryId:int}"
@rendermode InteractiveServer
@attribute [Authorize]
@using ValhallaVault.Data.Repositories
@using ValhallaVault.Data.Models
@using ValhallaVault.Components.Pages.RazorComponents
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Identity
@using ValhallaVault.Data
@using System.Reflection.Metadata.Ecma335
@using Microsoft.AspNetCore.Authorization
@using ValhallaVault.Data.Containers
@inject ISubcategoryRepository SubcategoryRepo
@inject IQuestionRepository QuestionRepo
@inject IAnswerRepository AnswerRepo
@inject IUserQuestionRepository UserQuestionRepo
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@if (CurrentSubcategoryContainer == null)
{
    <div class="container mt-4">
        <p class="alert alert-warning">Something went wrong! The Subcategory Container was null.</p>
    </div>
    return;
}

@if (CurrentSubcategoryContainer?.Questions == null)
{
    <div class="container mt-4">
        <p class="alert alert-warning">Something went wrong! The Questions could not be retrieved.</p>
    </div>
    return;
}

@if (CurrentQuestionContainer == null || CurrentQuestionContainer?.Answers == null)
{
    <div class="container mt-4">
        <p class="alert alert-warning">Something went wrong! This Question or the questions answers could not be retrieved.</p>
    </div>
    return;
}

<div class="container mt-4">
    <h1 class="text-primary">@CurrentSubcategoryContainer.Original.Name</h1>
    <BackButton></BackButton>
    <p class="text-muted">Question: @(CurrentSubcategoryContainer.Questions.IndexOf(CurrentQuestionContainer) + 1)/@(CurrentSubcategoryContainer.Questions.Count)</p>

    <div class="card">
        <div class="card-body">
            <h4 class="card-title mb-4">@CurrentQuestionContainer.Question</h4>
            <ul class="list-group list-group-flush">
                @foreach (AnswerContainer answerContainer in CurrentQuestionContainer.Answers)
                {
                    <li class="list-group-item" style="@(answerContainer.Style)">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="answerContainer.IsChecked" />
                            <label class="form-check-label">@answerContainer.Original.Answer</label>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="card-footer">
            <button @onclick="BackOneQuestion" class="btn btn-secondary" disabled="@ShouldDisableBackButton()">Back One Question</button>
            <button @onclick="CorrectAnswer" class="btn btn-primary" disabled="@(ShouldDisableCorrectAnswerButton())">Correct answer</button>
            <button @onclick="NextQuestion" class="btn btn-secondary" disabled="@ShouldDisableNextButton()">Next</button>
        </div>
    </div>
    
</div>

@code {
    //ooo didnt know #region was a thing?? how have I not found out this before????!?!?

    //TODO Add backbutton which takes user back up one level
    //TODO add % completion

    #region Parameters

    [Parameter]
    public int? SubcategoryId { get; set; }

    #endregion



    #region Variables

    private string? UserName;
    private SubCategoryContainer? CurrentSubcategoryContainer;
    private QuestionContainer? CurrentQuestionContainer;
    private List<AnswerContainer> Answers = new();

    #endregion



    #region EventHandlers

    private void BackOneQuestion(MouseEventArgs e)
    {
        if (CurrentQuestionContainer == null) return;
        int? count = CurrentSubcategoryContainer?.Questions?.Count;
        int? currentQuestionIndex = CurrentSubcategoryContainer?.Questions?.IndexOf(CurrentQuestionContainer);

        if (count == null || currentQuestionIndex == null || currentQuestionIndex <= 0) return;

        CurrentQuestionContainer = CurrentSubcategoryContainer?.Questions?[(int)currentQuestionIndex - 1];

        ResetAnswersContainerList();
    }
    private async Task CorrectAnswer(MouseEventArgs e)
    {
        if (UserHasChosenAnswer() != true) { return; }
        if (UserName == null) return;

        foreach (AnswerContainer answerContainer in CurrentQuestionContainer.Answers) answerContainer.ShowStyle = true;
        await SetAnswerOfQuestionInDbUsingAnswerContainers();
    }
    private void NextQuestion(MouseEventArgs e)
    {
        if (CurrentQuestionContainer == null || CurrentSubcategoryContainer == null) return;

        int? count = CurrentSubcategoryContainer.Questions?.Count;
        int? currentQuestionIndex = CurrentSubcategoryContainer.Questions?.IndexOf(CurrentQuestionContainer);

        if (count == null || currentQuestionIndex == null || count <= currentQuestionIndex + 1) return;

        CurrentQuestionContainer = CurrentSubcategoryContainer.Questions[(int)currentQuestionIndex + 1];
        ResetAnswersContainerList();
    }

    #endregion



    #region Methods

    private void ResetAnswersContainerList()
    {
        Answers.Clear();

        if (CurrentQuestionContainer == null) return;

        CurrentQuestionContainer.Answers?.ForEach(a =>
        {
            Answers.Add(new AnswerContainer()
                {
                    IsChecked = false,
                    Original = a.Original,
                    ShowStyle = false
                });
        });
    }


    private bool UserChoseCorrectAnswer()
    {
        if (UserHasChosenAnswer() != true) return false;

        bool answerIsCorrect = false;
        CurrentQuestionContainer?.Answers?.ForEach(a =>
        {
            if (a.IsChecked == true && a.Original.IsCorrect == true)
            {
                answerIsCorrect = true;
            }
        });
        return answerIsCorrect;
    }
    /// <summary>
    /// null when user has NOT chosen answer
    /// true when user has chosen ONE answer
    /// false when user has chosen MORE THAN ONE answer
    /// </summary>
    private bool? UserHasChosenAnswer()
    {
        int tickedAnswers = 0;

        CurrentQuestionContainer?.Answers.ForEach(ac =>
        {
            if (ac.IsChecked) tickedAnswers++;
        });

        return tickedAnswers switch
        {
            0 => null,        // user has not ticked any answer
            1 => true,        // user has ticked ONLY ONE answer
            _ => false    // user has ticked MORE THAN ONE
        };
    }
    /// <summary>
    /// This add a entry in the UserQuestions table in the db.
    /// Where all the information is stored about what user has answerd what question what correctly
    /// </summary>
    private async Task SetAnswerOfQuestionInDbUsingAnswerContainers()
    {
        if (CurrentQuestionContainer == null) return;
        if (UserHasChosenAnswer() != true) return;

        string? userId = await GetUserIdByNormalizedUserName();
        if (userId == null) return;

        // edits the already existing entry in the db if it already exists,
        // can only change it to true from false, not the other way round
        //if the user got the current question wrong, but has stored that they got it correct in db, it does not change anything in the db
        if ((await AnswerForQuestionForSpecificUserAlreadyExists(userId, CurrentQuestionContainer.Original.Id)) == true)
        {

            int? idOfUserQuestion = (await UserQuestionRepo.GetAllUserQuestionsAsync())
                .Where(a => a.UserId == userId && a.QuestionId == CurrentQuestionContainer.Original.Id)
                .Select(a => a.Id)
                .FirstOrDefault();

            if (idOfUserQuestion == null) return;

            var existingUserQuestion = await UserQuestionRepo.GetUserQuestionByIdAsync((int)idOfUserQuestion);

            if (existingUserQuestion != null && existingUserQuestion.IsCorrect == false)
            {
                await UserQuestionRepo.UpdateUserQuestionAsync((int)idOfUserQuestion, new UserQuestionModel
                {
                    Id = (int)idOfUserQuestion,
                    IsCorrect = UserChoseCorrectAnswer(),
                    QuestionId = CurrentQuestionContainer.Original.Id,
                    UserId = userId
                });

                await UserQuestionRepo.SaveAsync();
            }

            return;
        }

        await UserQuestionRepo.AddUserQuestionAsync(new UserQuestionModel()
            {
                UserId = userId,
                QuestionId = CurrentQuestionContainer.Original.Id,
                IsCorrect = UserChoseCorrectAnswer()
            });
        await UserQuestionRepo.SaveAsync();
    }
    /// <summary>
    /// Checks if the logged in user has already answerd this particular question
    /// </summary>
    /// <param name="userId"></param>
    /// <param name="questionId"></param>
    /// <returns></returns>
    private async Task<bool?> AnswerForQuestionForSpecificUserAlreadyExists(string? userId, int? questionId)
    {
        if (userId == null || questionId == null) return null;
        int? count = (await UserQuestionRepo.GetAllUserQuestionsAsync())
            .Where(q => q.QuestionId == questionId)
            .Where(q => q.UserId == userId)
            .ToList().Count;
        if (count != 0) return true;

        return false;
    }
    private async Task<string?> GetUserIdByNormalizedUserName(string? userName)
    {
        if (userName == null) return null;
        userName = userName.Trim().ToUpper();
        ApplicationUser? user = await UserManager.FindByNameAsync(userName);
        string? userId = user?.Id;
        return userId;

    }
    private async Task<string?> GetUserIdByNormalizedUserName()
    {
        return await GetUserIdByNormalizedUserName(UserName);

    }

    private bool ShouldDisableBackButton()
    {
        if (CurrentQuestionContainer == null) { return true; }

        int? currentQuestionIndex = CurrentSubcategoryContainer?.Questions?.IndexOf(CurrentQuestionContainer);

        return currentQuestionIndex == null || currentQuestionIndex <= 0;
    }
    private bool ShouldDisableNextButton()
    {
        // if (CurrentQuestionContainer == null || CurrentSubcategoryContainer == null) return true;

        // if (CurrentSubcategoryContainer.Questions.Equals(null)) return true;

        // int? currentQuestionIndex = CurrentSubcategoryContainer.Questions?.IndexOf(CurrentQuestionContainer);

        // if (currentQuestionIndex == null) return true;

        // if (currentQuestionIndex+1 >= CurrentSubcategoryContainer.Questions?.Count) return true;

        return false;
        //return currentQuestionIndex == null || currentQuestionIndex + 1 >= CurrentSubcategoryContainer?.Questions?.Count ;
    }
    private bool ShouldDisableCorrectAnswerButton()
    {
        if (UserHasChosenAnswer() != true || CurrentQuestionContainer == null | CurrentSubcategoryContainer == null) return true;

        if (CurrentQuestionContainer.Answers.Any(answer => answer.ShowStyle)) return true;

        return false;
    }
    private async Task<SubCategoryContainer?> BuildSubCategoryContainer(int subcategoryId)
    {
        var subcategory = await SubcategoryRepo.GetSubCategoryByIdIncludingThingsAsync(subcategoryId);

        if (subcategory == null)
        {
            // Handle the case when the subcategory is null
            return null;
        }

        var subcategoryContainer = new SubCategoryContainer
            {
                Original = subcategory,
                Questions = new List<QuestionContainer>()
            };

        foreach (var question in subcategory.Questions)
        {
            var questionContainer = new QuestionContainer
                {
                    Question = question.Question,
                    Answers = new List<AnswerContainer>(),
                    Original = question // Add the original QuestionModel to QuestionContainer
                };

            foreach (var answer in question.Answers)
            {
                questionContainer.Answers.Add(new AnswerContainer
                    {
                        Original = answer,
                        IsChecked = false,
                    });
            }
            subcategoryContainer.Questions.Add(questionContainer);
        }

        return subcategoryContainer;
    }
    #endregion



    #region WhenFirstLoadingPage

    //----------When first loading in this page BELOW THIS----------
    protected override async Task OnInitializedAsync()
    {
        if (SubcategoryId == null) return;

        CurrentSubcategoryContainer = await BuildSubCategoryContainer((int)SubcategoryId);

        if (CurrentSubcategoryContainer == null)
        {
            // Log or display an error message
            Console.WriteLine("SubcategoryContainer is null.");
            return;
        }

        UserName = (await AuthStateProvider.GetAuthenticationStateAsync())?.User?.Identity?.Name;

        if (CurrentSubcategoryContainer?.Questions == null || !CurrentSubcategoryContainer.Questions.Any())
        {
            // Log or display an error message
            Console.WriteLine("No questions found in SubcategoryContainer.");
            return;
        }

        CurrentQuestionContainer = CurrentSubcategoryContainer?.Questions.FirstOrDefault();

        if (CurrentQuestionContainer == null)
        {
            // Log or display an error message
            Console.WriteLine("CurrentQuestionContainer is null.");
        }

        ResetAnswersContainerList();
    }

    #endregion

}
